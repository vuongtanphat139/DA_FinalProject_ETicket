# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import authentication_pb2 as authentication__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in authentication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AuthenticationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsers = channel.unary_unary(
                '/authentication.AuthenticationService/GetUsers',
                request_serializer=authentication__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetUsersResponse.FromString,
                _registered_method=True)
        self.GetUserByID = channel.unary_unary(
                '/authentication.AuthenticationService/GetUserByID',
                request_serializer=authentication__pb2.GetUserByIDRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetUserByIDResponse.FromString,
                _registered_method=True)
        self.GetUserInfoByUsername = channel.unary_unary(
                '/authentication.AuthenticationService/GetUserInfoByUsername',
                request_serializer=authentication__pb2.GetUserInfoByUsernameRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetUserInfoByUsernameResponse.FromString,
                _registered_method=True)
        self.GetCompanyUserInfoByUsername = channel.unary_unary(
                '/authentication.AuthenticationService/GetCompanyUserInfoByUsername',
                request_serializer=authentication__pb2.GetCompanyUserInfoByUsernameRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetCompanyUserInfoByUsernameResponse.FromString,
                _registered_method=True)
        self.GetCompany = channel.unary_unary(
                '/authentication.AuthenticationService/GetCompany',
                request_serializer=authentication__pb2.GetCompanyRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetCompanyResponse.FromString,
                _registered_method=True)
        self.GetCompanyByID = channel.unary_unary(
                '/authentication.AuthenticationService/GetCompanyByID',
                request_serializer=authentication__pb2.GetCompanyByIDRequest.SerializeToString,
                response_deserializer=authentication__pb2.GetCompanyByIDResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/authentication.AuthenticationService/Login',
                request_serializer=authentication__pb2.LoginRequest.SerializeToString,
                response_deserializer=authentication__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.LoginCompany = channel.unary_unary(
                '/authentication.AuthenticationService/LoginCompany',
                request_serializer=authentication__pb2.LoginCompanyRequest.SerializeToString,
                response_deserializer=authentication__pb2.LoginCompanyResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/authentication.AuthenticationService/Logout',
                request_serializer=authentication__pb2.LogoutRequest.SerializeToString,
                response_deserializer=authentication__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/authentication.AuthenticationService/Register',
                request_serializer=authentication__pb2.RegisterRequest.SerializeToString,
                response_deserializer=authentication__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.RegisterCompany = channel.unary_unary(
                '/authentication.AuthenticationService/RegisterCompany',
                request_serializer=authentication__pb2.RegisterCompanyRequest.SerializeToString,
                response_deserializer=authentication__pb2.RegisterCompanyResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/authentication.AuthenticationService/UpdateUser',
                request_serializer=authentication__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=authentication__pb2.UpdateUserResponse.FromString,
                _registered_method=True)
        self.UpdateCompanyUser = channel.unary_unary(
                '/authentication.AuthenticationService/UpdateCompanyUser',
                request_serializer=authentication__pb2.UpdateCompanyUserRequest.SerializeToString,
                response_deserializer=authentication__pb2.UpdateCompanyUserResponse.FromString,
                _registered_method=True)
        self.ResetPassword = channel.unary_unary(
                '/authentication.AuthenticationService/ResetPassword',
                request_serializer=authentication__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=authentication__pb2.ResetPasswordResponse.FromString,
                _registered_method=True)
        self.StoreResetToken = channel.unary_unary(
                '/authentication.AuthenticationService/StoreResetToken',
                request_serializer=authentication__pb2.StoreResetTokenRequest.SerializeToString,
                response_deserializer=authentication__pb2.StoreResetTokenResponse.FromString,
                _registered_method=True)
        self.SendResetToken = channel.unary_unary(
                '/authentication.AuthenticationService/SendResetToken',
                request_serializer=authentication__pb2.SendResetTokenRequest.SerializeToString,
                response_deserializer=authentication__pb2.SendResetTokenResponse.FromString,
                _registered_method=True)


class AuthenticationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfoByUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyUserInfoByUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCompanyUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreResetToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendResetToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=authentication__pb2.GetUsersRequest.FromString,
                    response_serializer=authentication__pb2.GetUsersResponse.SerializeToString,
            ),
            'GetUserByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByID,
                    request_deserializer=authentication__pb2.GetUserByIDRequest.FromString,
                    response_serializer=authentication__pb2.GetUserByIDResponse.SerializeToString,
            ),
            'GetUserInfoByUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfoByUsername,
                    request_deserializer=authentication__pb2.GetUserInfoByUsernameRequest.FromString,
                    response_serializer=authentication__pb2.GetUserInfoByUsernameResponse.SerializeToString,
            ),
            'GetCompanyUserInfoByUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyUserInfoByUsername,
                    request_deserializer=authentication__pb2.GetCompanyUserInfoByUsernameRequest.FromString,
                    response_serializer=authentication__pb2.GetCompanyUserInfoByUsernameResponse.SerializeToString,
            ),
            'GetCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompany,
                    request_deserializer=authentication__pb2.GetCompanyRequest.FromString,
                    response_serializer=authentication__pb2.GetCompanyResponse.SerializeToString,
            ),
            'GetCompanyByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyByID,
                    request_deserializer=authentication__pb2.GetCompanyByIDRequest.FromString,
                    response_serializer=authentication__pb2.GetCompanyByIDResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=authentication__pb2.LoginRequest.FromString,
                    response_serializer=authentication__pb2.LoginResponse.SerializeToString,
            ),
            'LoginCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginCompany,
                    request_deserializer=authentication__pb2.LoginCompanyRequest.FromString,
                    response_serializer=authentication__pb2.LoginCompanyResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=authentication__pb2.LogoutRequest.FromString,
                    response_serializer=authentication__pb2.LogoutResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=authentication__pb2.RegisterRequest.FromString,
                    response_serializer=authentication__pb2.RegisterResponse.SerializeToString,
            ),
            'RegisterCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCompany,
                    request_deserializer=authentication__pb2.RegisterCompanyRequest.FromString,
                    response_serializer=authentication__pb2.RegisterCompanyResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=authentication__pb2.UpdateUserRequest.FromString,
                    response_serializer=authentication__pb2.UpdateUserResponse.SerializeToString,
            ),
            'UpdateCompanyUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCompanyUser,
                    request_deserializer=authentication__pb2.UpdateCompanyUserRequest.FromString,
                    response_serializer=authentication__pb2.UpdateCompanyUserResponse.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=authentication__pb2.ResetPasswordRequest.FromString,
                    response_serializer=authentication__pb2.ResetPasswordResponse.SerializeToString,
            ),
            'StoreResetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreResetToken,
                    request_deserializer=authentication__pb2.StoreResetTokenRequest.FromString,
                    response_serializer=authentication__pb2.StoreResetTokenResponse.SerializeToString,
            ),
            'SendResetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.SendResetToken,
                    request_deserializer=authentication__pb2.SendResetTokenRequest.FromString,
                    response_serializer=authentication__pb2.SendResetTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authentication.AuthenticationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('authentication.AuthenticationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthenticationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetUsers',
            authentication__pb2.GetUsersRequest.SerializeToString,
            authentication__pb2.GetUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetUserByID',
            authentication__pb2.GetUserByIDRequest.SerializeToString,
            authentication__pb2.GetUserByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserInfoByUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetUserInfoByUsername',
            authentication__pb2.GetUserInfoByUsernameRequest.SerializeToString,
            authentication__pb2.GetUserInfoByUsernameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompanyUserInfoByUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetCompanyUserInfoByUsername',
            authentication__pb2.GetCompanyUserInfoByUsernameRequest.SerializeToString,
            authentication__pb2.GetCompanyUserInfoByUsernameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetCompany',
            authentication__pb2.GetCompanyRequest.SerializeToString,
            authentication__pb2.GetCompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCompanyByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/GetCompanyByID',
            authentication__pb2.GetCompanyByIDRequest.SerializeToString,
            authentication__pb2.GetCompanyByIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/Login',
            authentication__pb2.LoginRequest.SerializeToString,
            authentication__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/LoginCompany',
            authentication__pb2.LoginCompanyRequest.SerializeToString,
            authentication__pb2.LoginCompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/Logout',
            authentication__pb2.LogoutRequest.SerializeToString,
            authentication__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/Register',
            authentication__pb2.RegisterRequest.SerializeToString,
            authentication__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/RegisterCompany',
            authentication__pb2.RegisterCompanyRequest.SerializeToString,
            authentication__pb2.RegisterCompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/UpdateUser',
            authentication__pb2.UpdateUserRequest.SerializeToString,
            authentication__pb2.UpdateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCompanyUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/UpdateCompanyUser',
            authentication__pb2.UpdateCompanyUserRequest.SerializeToString,
            authentication__pb2.UpdateCompanyUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/ResetPassword',
            authentication__pb2.ResetPasswordRequest.SerializeToString,
            authentication__pb2.ResetPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreResetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/StoreResetToken',
            authentication__pb2.StoreResetTokenRequest.SerializeToString,
            authentication__pb2.StoreResetTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendResetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authentication.AuthenticationService/SendResetToken',
            authentication__pb2.SendResetTokenRequest.SerializeToString,
            authentication__pb2.SendResetTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
