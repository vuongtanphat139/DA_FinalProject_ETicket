syntax = "proto3";

package event_management;

message Event {
    int32 id = 1;
    string name = 2;
    string description = 3;
    string location = 4;
    string datetime = 5;
    string bannerURL = 6;
    string url = 7;
    string venue = 8;
    string address = 9;
    int32 orgId = 10;
    int32 minTicketPrice = 11;
    string status = 12;
    string statusName = 13;
    string orgLogoURL = 14;
    string orgName = 15;
    string orgDescription = 16;
    string categories = 17;
}

message Organization {
    int32 id = 1;
    Event events = 2;
    string orgName = 3;
    string orgDescription = 4;
}

message Showing {
    int32 id = 1;
    string status = 2;
    string statusName = 3;
    string startTime = 8;
    string endTime = 9;
    repeated TicketType ticketTypes = 12;
}

message TicketType {
    int32 id = 1;
    string name = 2;
    string description = 3;
    string color = 4;
    bool isFree = 5;
    int32 price = 6;
    int32 originalPrice = 7;
    int32 maxQtyPerOrder = 8;
    int32 minQtyPerOrder = 9;
    string startTime = 10;
    string endTime = 11;
    int32 position = 12;
    string status = 13;
    string statusName = 14;
    string imageUrl = 15;
}

message Empty {}

message EventResponse {
    bool success = 1;
    string message = 2;
    Event event = 3;
}

message SearchCriteria {
    string date = 1;
    string location = 2;
    string topic = 3;
}

message EventList {
    repeated Event events = 1;
}

message TicketRequest {
    int32 event_id = 1;
    int32 user_id = 2;
    int32 quantity = 3;
}

message TicketResponse {
    bool success = 1;
    string message = 2;
}

message UserID {
    int32 id = 1;
}

service EventManagement {
    rpc CreateEvent (CreateEventRequest) returns (EventResponse);
    rpc UpdateEvent (Event) returns (EventResponse);
    rpc GetEvent (GetEventRequest) returns (EventList);
    rpc GetEventById (GetEventByIdRequest) returns (Event);
    rpc SearchEvents (SearchCriteria) returns (EventList);
    rpc PurchaseTicket (TicketRequest) returns (TicketResponse);
    rpc GetUserEvents (UserID) returns (EventList);
}

message GetEventRequest {
    optional string name = 1;
    optional string categories = 2;
}

message GetEventByIdRequest {
    string id = 1;
}

message CreateEventRequest {
    string name = 1;
    string bannerURL = 2;
    string datetime = 3;
    int32 minTicketPrice = 4;
    string location = 5;
}
